1. Был сделан обзор представленных данных. Разброс по качеству изображений весьма велик.
   Попадаются и хорошего качества, и плохого. Особо в глаза бросается группа изображений,
   номера вагонов на которых были сделаны под трафарет. Т.е. в символах есть разрывы.Этот
   фактор добавляет ряд трудностей, связаных с предобработкой изображений. Также можно выделить
   группы смазанных изображений, изображений с тенью от предметов, изображений сделанных днём и
   ночью.
2. В качестве OCR-инструмента распознавания использовался pytesseract.
3. Для оценки качества распознавания необходимо использовать вектор целевых переменных (в нашем случае
   это номер истинный вагона). Было принято решение организовать набор данных номеров вручную, чтобы 
   можно было понять, как от перемены различных параметров изменяется качество распознавания. Вручную было
   "распознано" 2000 номеров вагонов.
4. Для первичной оценки работы OCR изображение сразу подавалось на его вход без предварительной обработки.
   Результат составил 22%.
5. Затем применялись разные фильтры. Но впоследствии от них пришлось отказаться. Blur фильтрация всё только
   портила. Даже нормальные номера вагонов после blur-размытия OCR не воспринимала. Я ограничился функцией closing
   и адаптивной бинаризацией. Closing очень хорошо себя показала на изображениях, нарисованных под трафарет. 
   Адаптивная бинаризация позволяла удалить лишние пятна с некоторых изображений. При этом она показала куда
   большие результаты, чем бинаризация Оцу, которая плохо справлялась с тенями и шумами на фото.
6. После выбора набора для обработки они применялись для каждого изображения, которе потом распознавалось и 
   заносилось в список. В результате процент распознанных изображений упал до 15%. Сразу подозрение упало
   на функцию бинаризации, поскольку при предварительной оценке она давала неоднозначные результаты.
7. Убрав бинаризацию, результат поднялся до 29%. При этом нельзя отрицать влияние человеческого фактора.
   В процессе ручного распознавания я мог не раз ошибиться. 

8. Выводы: по результатам, которые были получены можно сказать, что нет возможности написать универсальную
   функцию для распознавания данного набора изображений,поскольку он сильно отличается качеством. 
   Для решения проблемы, связанной с несовершенством изображений нужно перед подачей
   картинок на обработку классифицировать их. Вероятнее всего результаты даст анализ гистограммы. Потом уже
   для каждой группы картинок рассчитывать ядро для фильтра, использовать фильтры и распознавание. При таком 
   подходе точность распознавания станет выше.
   Плюсом данного подхода является отсутсвие необходимости обучать какую-то свою нейронную сеть, потому-что
   она уже есть готовая и с задачей распознавания справляется нормально, проблема в предобработке изображений.
   Также можно организовать другой подход: выполнить распознавание вручную для набора данных, затем сделать 
   аугментацию изображений, например менять угол наклона, перечёркивать номер вагона, применять размытие и др.
   Тем самым увеличится размер обучающей выборки. Обучить нейросеть на этих данных, а затем сравнить с первым
   методом.
   По сути сверточная нейросеть тоже самое и будет делать - классификацию и фильтрацию в каждой своей отдельной
   свертке. Минусом же будет склонность нейросети к переобучению.

   Изначально была идея сделать небольшое консольное приложение, чтобы можно было запускать слайдшоу 
   картинок и сразу выводить номера распознанных вагонов. Но из-за большого разброса качества изображений 
   было принято решение ограничиться анализом в блокноте jupyter.